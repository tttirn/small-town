import { getApp, _getProvider } from '@firebase/app';
import { _ as _signInWithRedirect, a as _reauthenticateWithRedirect, b as _linkWithRedirect, i as initializeAuth, c as indexedDBLocalPersistence, d as cordovaPopupRedirectResolver, r as registerAuth } from './popup_redirect-c49bb237.js';
export { X as ActionCodeURL, A as AuthCredential, E as EmailAuthCredential, t as EmailAuthProvider, F as FacebookAuthProvider, v as GithubAuthProvider, G as GoogleAuthProvider, O as OAuthCredential, w as OAuthProvider, P as PhoneAuthCredential, S as SAMLAuthProvider, T as TwitterAuthProvider, I as applyActionCode, e as browserLocalPersistence, f as browserSessionPersistence, J as checkActionCode, H as confirmPasswordReset, n as connectAuthEmulator, d as cordovaPopupRedirectResolver, L as createUserWithEmailAndPassword, m as debugErrorMap, l as deleteUser, U as fetchSignInMethodsForEmail, a4 as getAdditionalUserInfo, a1 as getIdToken, a2 as getIdTokenResult, a6 as getMultiFactorResolver, g as getRedirectResult, q as inMemoryPersistence, c as indexedDBLocalPersistence, i as initializeAuth, Q as isSignInWithEmailLink, z as linkWithCredential, a7 as multiFactor, h as onAuthStateChanged, o as onIdTokenChanged, Y as parseActionCodeURL, p as prodErrorMap, B as reauthenticateWithCredential, a5 as reload, V as sendEmailVerification, D as sendPasswordResetEmail, N as sendSignInLinkToEmail, s as setPersistence, x as signInAnonymously, y as signInWithCredential, C as signInWithCustomToken, M as signInWithEmailAndPassword, R as signInWithEmailLink, k as signOut, a3 as unlink, j as updateCurrentUser, $ as updateEmail, a0 as updatePassword, Z as updateProfile, u as useDeviceLanguage, W as verifyBeforeUpdateEmail, K as verifyPasswordResetCode } from './popup_redirect-c49bb237.js';
import 'tslib';
import '@firebase/util';
import '@firebase/component';
import '@firebase/logger';

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signInWithRedirect(auth, provider, resolver) {
    return _signInWithRedirect(auth, provider, resolver);
}
function reauthenticateWithRedirect(user, provider, resolver) {
    return _reauthenticateWithRedirect(user, provider, resolver);
}
function linkWithRedirect(user, provider, resolver) {
    return _linkWithRedirect(user, provider, resolver);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getAuth(app) {
    if (app === void 0) { app = getApp(); }
    var provider = _getProvider(app, 'auth-exp');
    if (provider.isInitialized()) {
        return provider.getImmediate();
    }
    return initializeAuth(app, {
        persistence: indexedDBLocalPersistence,
        popupRedirectResolver: cordovaPopupRedirectResolver
    });
}
registerAuth("Cordova" /* CORDOVA */);

export { getAuth, linkWithRedirect, reauthenticateWithRedirect, signInWithRedirect };
//# sourceMappingURL=index.js.map
