'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fetchImpl = require('node-fetch');
var app = require('@firebase/app');
var enum_maps = require('./enum_maps-29503c94.js');
require('tslib');
require('@firebase/util');
require('@firebase/component');
require('@firebase/logger');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var fetchImpl__namespace = /*#__PURE__*/_interopNamespace(fetchImpl);

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Initialize the fetch polyfill, the types are slightly off so just cast and hope for the best
enum_maps.FetchProvider.initialize(fetchImpl__namespace.default, fetchImpl__namespace.Headers, fetchImpl__namespace.Response);
function getAuth(app$1) {
    if (app$1 === void 0) { app$1 = app.getApp(); }
    var provider = app._getProvider(app$1, 'auth-exp');
    if (provider.isInitialized()) {
        return provider.getImmediate();
    }
    return enum_maps.initializeAuth(app$1);
}
enum_maps.registerAuth("Node" /* NODE */);

exports.ActionCodeOperation = enum_maps.ActionCodeOperation;
exports.ActionCodeURL = enum_maps.ActionCodeURL;
exports.AuthCredential = enum_maps.AuthCredential;
exports.EmailAuthCredential = enum_maps.EmailAuthCredential;
exports.EmailAuthProvider = enum_maps.EmailAuthProvider;
exports.FacebookAuthProvider = enum_maps.FacebookAuthProvider;
exports.FactorId = enum_maps.FactorId;
exports.GithubAuthProvider = enum_maps.GithubAuthProvider;
exports.GoogleAuthProvider = enum_maps.GoogleAuthProvider;
exports.OAuthCredential = enum_maps.OAuthCredential;
exports.OAuthProvider = enum_maps.OAuthProvider;
exports.OperationType = enum_maps.OperationType;
exports.PhoneAuthCredential = enum_maps.PhoneAuthCredential;
exports.ProviderId = enum_maps.ProviderId;
exports.SAMLAuthProvider = enum_maps.SAMLAuthProvider;
exports.SignInMethod = enum_maps.SignInMethod;
exports.TwitterAuthProvider = enum_maps.TwitterAuthProvider;
exports.applyActionCode = enum_maps.applyActionCode;
exports.checkActionCode = enum_maps.checkActionCode;
exports.confirmPasswordReset = enum_maps.confirmPasswordReset;
exports.connectAuthEmulator = enum_maps.connectAuthEmulator;
exports.createUserWithEmailAndPassword = enum_maps.createUserWithEmailAndPassword;
exports.debugErrorMap = enum_maps.debugErrorMap;
exports.deleteUser = enum_maps.deleteUser;
exports.fetchSignInMethodsForEmail = enum_maps.fetchSignInMethodsForEmail;
exports.getAdditionalUserInfo = enum_maps.getAdditionalUserInfo;
exports.getIdToken = enum_maps.getIdToken;
exports.getIdTokenResult = enum_maps.getIdTokenResult;
exports.getMultiFactorResolver = enum_maps.getMultiFactorResolver;
exports.inMemoryPersistence = enum_maps.inMemoryPersistence;
exports.initializeAuth = enum_maps.initializeAuth;
exports.isSignInWithEmailLink = enum_maps.isSignInWithEmailLink;
exports.linkWithCredential = enum_maps.linkWithCredential;
exports.multiFactor = enum_maps.multiFactor;
exports.onAuthStateChanged = enum_maps.onAuthStateChanged;
exports.onIdTokenChanged = enum_maps.onIdTokenChanged;
exports.parseActionCodeURL = enum_maps.parseActionCodeURL;
exports.prodErrorMap = enum_maps.prodErrorMap;
exports.reauthenticateWithCredential = enum_maps.reauthenticateWithCredential;
exports.reload = enum_maps.reload;
exports.sendEmailVerification = enum_maps.sendEmailVerification;
exports.sendPasswordResetEmail = enum_maps.sendPasswordResetEmail;
exports.sendSignInLinkToEmail = enum_maps.sendSignInLinkToEmail;
exports.setPersistence = enum_maps.setPersistence;
exports.signInAnonymously = enum_maps.signInAnonymously;
exports.signInWithCredential = enum_maps.signInWithCredential;
exports.signInWithCustomToken = enum_maps.signInWithCustomToken;
exports.signInWithEmailAndPassword = enum_maps.signInWithEmailAndPassword;
exports.signInWithEmailLink = enum_maps.signInWithEmailLink;
exports.signOut = enum_maps.signOut;
exports.unlink = enum_maps.unlink;
exports.updateCurrentUser = enum_maps.updateCurrentUser;
exports.updateEmail = enum_maps.updateEmail;
exports.updatePassword = enum_maps.updatePassword;
exports.updateProfile = enum_maps.updateProfile;
exports.useDeviceLanguage = enum_maps.useDeviceLanguage;
exports.verifyBeforeUpdateEmail = enum_maps.verifyBeforeUpdateEmail;
exports.verifyPasswordResetCode = enum_maps.verifyPasswordResetCode;
exports.getAuth = getAuth;
//# sourceMappingURL=index.js.map
