/**
 * Firebase Installations
 *
 * @packageDocumentation
 */

import { FirebaseApp } from '@firebase/app';

/**
 * Deletes the Firebase Installation and all associated data.
 * @param installations - The `Installations` instance.
 *
 * @public
 */
export declare function deleteInstallations(installations: FirebaseInstallations): Promise<void>;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Public interface of the FirebaseInstallations SDK.
 *
 * @public
 */
export declare interface FirebaseInstallations {
}

/* Excluded from this release type: _FirebaseInstallationsInternal */

/**
 * Creates a Firebase Installation if there isn't one for the app and
 * returns the Installation ID.
 * @param installations - The `Installations` instance.
 *
 * @public
 */
export declare function getId(installations: FirebaseInstallations): Promise<string>;

/**
 * Returns an instance of FirebaseInstallations associated with the given FirebaseApp instance.
 * @param app - The `FirebaseApp` instance.
 *
 * @public
 */
export declare function getInstallations(app?: FirebaseApp): FirebaseInstallations;

/**
 * Returns an Installation auth token, identifying the current Firebase Installation.
 * @param installations - The `Installations` instance.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */
export declare function getToken(installations: FirebaseInstallations, forceRefresh?: boolean): Promise<string>;

/**
 * An user defined callback function that gets called when Installations ID changes.
 *
 * @public
 */
export declare type IdChangeCallbackFn = (installationId: string) => void;

/**
 * Unsubscribe a callback function previously added via {@link #IdChangeCallbackFn}.
 *
 * @public
 */
export declare type IdChangeUnsubscribeFn = () => void;

/**
 * Sets a new callback that will get called when Installation ID changes.
 * Returns an unsubscribe function that will remove the callback when called.
 * @param installations - The `Installations` instance.
 * @param callback - The callback function that is invoked when FID changes.
 * @returns A function that can be called to unsubscribe.
 *
 * @public
 */
export declare function onIdChange(installations: FirebaseInstallations, callback: IdChangeCallbackFn): IdChangeUnsubscribeFn;

export { }
